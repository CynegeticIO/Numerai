{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"8_Production_Model_8","provenance":[{"file_id":"https://github.com/jonrtaylor/twitch/blob/master/Production_Model.ipynb","timestamp":1629916428721}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nXtoKUdBHOXY","executionInfo":{"status":"ok","timestamp":1630190003736,"user_tz":-120,"elapsed":23035,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"df179a79-d567-4c85-810a-c9f61493fb99"},"source":["from google.colab import drive\n","drive.mount('drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YT-OrWK6HSBr","executionInfo":{"status":"ok","timestamp":1630190011771,"user_tz":-120,"elapsed":8046,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"a40fe083-db78-4bec-acc3-f34aa42526f5"},"source":["!pip install numerapi\n","!pip install vecstack;"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting numerapi\n","  Downloading numerapi-2.7.0-py3-none-any.whl (25 kB)\n","Requirement already satisfied: pandas>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from numerapi) (1.1.5)\n","Requirement already satisfied: tqdm>=4.29.1 in /usr/local/lib/python3.7/dist-packages (from numerapi) (4.62.0)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from numerapi) (2.8.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from numerapi) (2.23.0)\n","Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.7/dist-packages (from numerapi) (7.1.2)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from numerapi) (2018.9)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.1.0->numerapi) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil->numerapi) (1.15.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->numerapi) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->numerapi) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->numerapi) (2021.5.30)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->numerapi) (2.10)\n","Installing collected packages: numerapi\n","Successfully installed numerapi-2.7.0\n","Collecting vecstack\n","  Downloading vecstack-0.4.0.tar.gz (18 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from vecstack) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from vecstack) (1.4.1)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from vecstack) (0.22.2.post1)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->vecstack) (1.0.1)\n","Building wheels for collected packages: vecstack\n","  Building wheel for vecstack (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for vecstack: filename=vecstack-0.4.0-py3-none-any.whl size=19878 sha256=f4a63f7c9ca2db327a1efb7a99b710c2642c57a76de31dce1b2e726c2808b312\n","  Stored in directory: /root/.cache/pip/wheels/28/fe/0c/fe8e43660e3316d7ce204e59a79a72246c0ae9b6c5c79841c8\n","Successfully built vecstack\n","Installing collected packages: vecstack\n","Successfully installed vecstack-0.4.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ppQ5-JqhI3gS"},"source":["\n","import os\n","import gc\n","import csv\n","import sys\n","import glob\n","import time\n","from pathlib import Path\n","from multiprocessing import Pool\n","\n","import numerapi\n","\n","import scipy\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import random\n","import sklearn\n","from sklearn import (\n","    feature_extraction, feature_selection, decomposition, linear_model,\n","    model_selection, metrics, svm, preprocessing, utils\n",")\n","from sklearn.preprocessing import StandardScaler,MinMaxScaler, OrdinalEncoder, LabelEncoder,OneHotEncoder\n","from keras.models import Sequential, model_from_json, load_model\n","from keras.layers import Dense, Dropout, Activation,LSTM,Bidirectional, MaxPooling2D, Flatten,GRU\n","from sklearn.model_selection import StratifiedKFold, GroupKFold, GridSearchCV,cross_val_score,KFold, RepeatedStratifiedKFold,train_test_split\n","from sklearn.metrics import log_loss, make_scorer, mean_squared_error,classification_report,accuracy_score\n","from keras.utils import np_utils \n","from sklearn import preprocessing\n","from xgboost import XGBRegressor \n","from sklearn.cluster import KMeans\n","import matplotlib as plt\n","from sklearn.decomposition import PCA\n","from sklearn.preprocessing import StandardScaler,MinMaxScaler\n","\n","import math\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.models import Model\n","from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, BaggingRegressor\n","from sklearn.linear_model import SGDRegressor\n","from lightgbm import LGBMRegressor\n","from sklearn.tree import DecisionTreeRegressor \n","\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch\n","from vecstack import stacking\n","\n","from sklearn import metrics\n","\n","def RMSLE(y, pred):\n","    return metrics.mean_squared_error(y, pred) ** 0.5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u3_uy9qmJRtQ"},"source":["TOURNAMENT_NAME = \"nomi\"\n","TARGET_NAME = f\"target\"\n","PREDICTION_NAME = f\"prediction\"\n","\n","BENCHMARK = 0\n","BAND = 0.2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HPqlpE4-d0G0"},"source":["seed = 1\n","rand = np.random.seed(seed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HrzPVfR6egjj","executionInfo":{"status":"ok","timestamp":1630190056050,"user_tz":-120,"elapsed":35405,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"9ea9c748-0a14-4a20-fda2-fffeb66be294"},"source":["napi = numerapi.NumerAPI(verbosity=\"info\")\n","\n","napi.download_current_dataset(unzip=True)\n","\n","current_ds = napi.get_current_round()\n","latest_round = os.path.join('numerai_dataset_'+str(current_ds))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-08-28 22:33:40,833 INFO numerapi.utils: starting download\n","./numerai_dataset_279.zip: 100%|█████████▉| 419M/419M [00:17<00:00, 30.3MB/s]2021-08-28 22:33:58,118 INFO numerapi.base_api: unzipping file...\n","./numerai_dataset_279.zip: 419MB [00:35, 11.9MB/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"taUitEnG4UXe"},"source":["##################################################################\n","##################### LOAD DATA ##################################\n","##################################################################"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VgodzImqq7z3","executionInfo":{"status":"ok","timestamp":1630190141520,"user_tz":-120,"elapsed":81218,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"2d764e4c-c15a-493c-873e-552931d781d3"},"source":["%%time\n","print(\"# Loading data...\")\n","\n","training_data = pd.read_csv(os.path.join(latest_round, \"numerai_training_data.csv\")).set_index(\"id\")\n","tournament_data = pd.read_csv(os.path.join(latest_round, \"numerai_tournament_data.csv\")).set_index(\"id\")\n","validation_data = tournament_data[tournament_data.data_type == \"validation\"]\n","\n","print(\"# All Loaded...\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["# Loading data...\n","# All Loaded...\n","CPU times: user 1min 7s, sys: 14.2 s, total: 1min 21s\n","Wall time: 1min 25s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gKGYq1Ce7MHX","executionInfo":{"status":"ok","timestamp":1630190141521,"user_tz":-120,"elapsed":25,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"7827bfad-6de9-4f75-8573-b959f01588b4"},"source":["feature_names = [f for f in training_data.columns if f.startswith(\"feature\")]\n","print(f\"Loaded {len(feature_names)} features\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Loaded 310 features\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OS3psMxidNg1"},"source":["era_list = training_data[\"era\"].unique().tolist()\n","h1_eras = era_list[:30]\n","h2_eras = era_list[30:60]\n","h3_eras = era_list[60:90]\n","h4_eras = era_list[90:120]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zDILc7stJeQa"},"source":["X1_train = training_data[training_data[\"era\"].isin(h1_eras)]#training data for partition 1\n","X2_train = training_data[training_data[\"era\"].isin(h2_eras)] #training data for partition 2\n","X3_train = training_data[training_data[\"era\"].isin(h3_eras)] #training data for partition 3\n","X4_train = training_data[training_data[\"era\"].isin(h4_eras)] #training data for partition 4"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"paIjVpMU6Vjf"},"source":["\n","from sklearn.preprocessing import MinMaxScaler\n","def _neutralize(df, columns, by, proportion=1.0):\n","    scores = df[columns]\n","    exposures = df[by].values\n","    scores = scores - proportion * exposures.dot(numpy.linalg.pinv(exposures).dot(scores))\n","    return scores / scores.std(ddof=0)\n","def _normalize(df):\n","    X = (df.rank(method=\"first\") - 0.5) / len(df)\n","    return scipy.stats.norm.ppf(X)\n","def normalize_and_neutralize(df, columns, by, proportion=1.0):\n","    # Convert the scores to a normal distribution\n","    df[columns] = _normalize(df[columns])\n","    df[columns] = _neutralize(df, columns, by, proportion)\n","    return df[columns]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WWZOsU3dcS8v"},"source":["def full_neutralization(df, feature_names, pred_name=\"prediction_kazutsugi\"):\n","    df[pred_name] = df.groupby(\"era\").apply(lambda x: normalize_and_neutralize(x, [pred_name], feature_names))\n","    scaled_preds = MinMaxScaler().fit_transform(df[[pred_name]])\n","    return scaled_preds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vS0c8va7JfbJ"},"source":["df2[\"preds\"] = xgb_preds\n","df2[\"preds_neutralized\"] = df2.groupby(\"era\").apply(\n","    lambda x: normalize_and_neutralize(x, [\"preds\"], features, 0.5) # neutralize by 50% within each era\n",")\n","scaler = MinMaxScaler()\n","df2[\"preds_neutralized\"] = scaler.fit_transform(df2[[\"preds_neutralized\"]]) # transform back to 0-1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jjaw01CkJgbx"},"source":["y1_train = X1_train.target.values\n","y2_train = X2_train.target.values\n","y3_train = X3_train.target.values\n","y4_train = X4_train.target.values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kd8CWTsEyaJY"},"source":["L1 = LGBMRegressor()\n","L2 = LGBMRegressor()\n","L3 = LGBMRegressor()\n","L4 = LGBMRegressor()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-3V4rQQZzQgO"},"source":["L1.fit(X1_train[feature_names], y1_train)\n","L2.fit(X2_train[feature_names], y2_train)\n","L3.fit(X3_train[feature_names], y3_train)\n","L4.fit(X4_train[feature_names], y4_train)\n","#score function\n","def correlation_score(y_true, y_pred):\n","    return np.corrcoef(y_true, y_pred)[0,1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hBT36hQJynmg"},"source":["L1_preds = L1.predict(tournament_data[feature_names]) #make predictions on the out-of-sample test set\n","L2_preds = L2.predict(tournament_data[feature_names])\n","L3_preds = L3.predict(tournament_data[feature_names])\n","L4_preds = L4.predict(tournament_data[feature_names])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6OY8kqC4qKcR"},"source":["preds = pd.DataFrame(L1_preds)\n","preds.columns = ['L1_preds']\n","preds['L2_preds'] = L2_preds\n","preds['L3_preds'] = L3_preds\n","preds['L4_preds'] = L4_preds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YGeBbIMoKdNf","executionInfo":{"status":"ok","timestamp":1630190184395,"user_tz":-120,"elapsed":42,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"28b4ce71-6e97-4318-d53c-2d1864901011"},"source":["preds['averaged_preds'] = (preds.L1_preds + preds.L2_preds + preds.L3_preds + preds.L4_preds) / 4 #arithmetic average of each model's out of sample predictions"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-08-28 22:36:24,434 INFO numexpr.utils: Note: NumExpr detected 40 cores but \"NUMEXPR_MAX_THREADS\" not set, so enforcing safe limit of 8.\n","2021-08-28 22:36:24,436 INFO numexpr.utils: NumExpr defaulting to 8 threads.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KI7TbTGXKkZZ","executionInfo":{"status":"ok","timestamp":1630190184395,"user_tz":-120,"elapsed":36,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"f5e82457-9f2d-43de-8c6d-a0e4aa5246bf"},"source":["preds['averaged_preds']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0          0.483880\n","1          0.487502\n","2          0.520092\n","3          0.503786\n","4          0.499502\n","             ...   \n","1800929    0.509412\n","1800930    0.505548\n","1800931    0.517979\n","1800932    0.519212\n","1800933    0.503180\n","Name: averaged_preds, Length: 1800934, dtype: float64"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"P0G-Niah4k8f"},"source":["tournament_data[PREDICTION_NAME]=preds['averaged_preds'].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eTinSiX04lG6"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n7TMO5f5Nu2U"},"source":["def neutralize(df, columns, by, proportion=1.0):\n","  \n","    scores = df[columns]\n","    exposures = df[by].values\n","    # constant column to make sure the series is completely neutral to exposures\n","    exposures = np.hstack((exposures, np.array([np.mean(scores)] * len(exposures)).reshape(-1, 1)))\n","    gc.collect()\n","    scores = scores - proportion * exposures.dot(np.linalg.pinv(exposures).dot(scores))\n","    gc.collect()\n","    return scores / scores.std()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7yV4id17NyWr","executionInfo":{"status":"ok","timestamp":1630190236468,"user_tz":-120,"elapsed":52101,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"b06e3b18-94e1-4b8f-a56e-d949ff561aad"},"source":["%%time\n","tournament_data[PREDICTION_NAME] = neutralize(tournament_data, PREDICTION_NAME, feature_names)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 10min 2s, sys: 10min 4s, total: 20min 7s\n","Wall time: 52.1 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Nw4PXhbUPOqy"},"source":["def minmax_norm(df):\n","    return (df - df.min()) / (df.max() - df.min())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l1-CxdfDPQ6o"},"source":["tournament_data[PREDICTION_NAME] = minmax_norm(tournament_data[PREDICTION_NAME])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IQAwUFYtEOZx","executionInfo":{"status":"ok","timestamp":1630190237600,"user_tz":-120,"elapsed":398,"user":{"displayName":"Joan-Marc Fisa Gol","photoUrl":"","userId":"00374894131735723747"}},"outputId":"b11c04f8-5875-4541-db3a-cdc7f0861afd"},"source":["tournament_data[PREDICTION_NAME]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id\n","n0003aa52cab36c2    0.480438\n","n000920ed083903f    0.470329\n","n0038e640522c4a6    0.499898\n","n004ac94a87dc54b    0.561222\n","n0052fe97ea0c05f    0.488693\n","                      ...   \n","nffd1cda0c61ecdb    0.503238\n","nffd711b0e6007e3    0.487404\n","nffd8a4d389df16a    0.579732\n","nffdec2abd3d4c1e    0.538536\n","nfff8751e4f86103    0.493136\n","Name: prediction, Length: 1800934, dtype: float64"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"fP1A7psc4lJi"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vcAke4lRHt1G"},"source":["tournament_data[PREDICTION_NAME].to_csv('BeeChain_8.csv')\n","\n","!cp BeeChain_8.csv \"drive/My Drive/BeeChain Foundation/\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BPHyjf9x6ZYl"},"source":[""],"execution_count":null,"outputs":[]}]}